//
//  {{ module_info.name }}Interactor.swift
//  {{ developer.company }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import RxSwift

final class {{ module_info.name }}Interactor: {{ module_info.name }}ViewOutput, {{ module_info.name }}PresenterInput {
	private let disposeBag: DisposeBag
	private let requestSubject: PublishSubject<{{ module_info.name }}Flow.Request>

	// MARK: - Initializer

	init() {
		disposeBag = DisposeBag()
		requestSubject = PublishSubject()
	}

	// MARK: - {{ module_info.name }}ViewOutput

	var handleRequest: AnyObserver<{{ module_info.name }}Flow.Request> {
		return requestSubject.asObserver()
	}

	// MARK: - {{ module_info.name }}PresenterInput

	var response: Observable<{{ module_info.name }}Flow.Response> {
		/*
		return requestSubject
			.asObservable()
			.map { request in
				switch request {
				case .myRequest: return self.handleMyRequest()
				}
			}
			.flatMap { /* Do some work */}
			.map { {{ module_info.name }}Flow.Response }
		*/

		return .never()
	}
}
